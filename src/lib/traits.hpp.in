#include <cstddef>

#include <utility>

#include "check.hpp"


namespace json2lua
{
	template<
	 typename CallbacksClass
	>
	struct traits final
	{
		static_assert(check<CallbacksClass>());
		
		static constexpr bool noexcept_read =
			noexcept(std::declval<CallbacksClass>().read());
		static constexpr bool noexcept_write_c =
			noexcept(std::declval<CallbacksClass>().write(static_cast<const unsigned char *>(nullptr), static_cast<std::size_t>(0)));
		static constexpr bool noexcept_write_s =
			noexcept(std::declval<CallbacksClass>().write(static_cast<unsigned char>(0)));
		static constexpr bool noexcept_write =
			noexcept_write_c && noexcept_write_s;
		static constexpr bool noexcept_encode =
			noexcept(std::declval<CallbacksClass>().encode_string_code_point(static_cast<char32_t>(0)));
	};
}
